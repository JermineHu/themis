// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set AdminQuerySet

// AdminQuerySet is an queryset type for Admin
type AdminQuerySet struct {
	db *gorm.DB
}

// NewAdminQuerySet constructs new AdminQuerySet
func NewAdminQuerySet(db *gorm.DB) AdminQuerySet {
	return AdminQuerySet{
		db: db.Model(&Admin{}),
	}
}

func (qs AdminQuerySet) w(db *gorm.DB) AdminQuerySet {
	return NewAdminQuerySet(db)
}

// Create is an autogenerated method
// nolint: dupl
func (o *Admin) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Admin) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) All(ret *[]Admin) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) CreatedAtEq(createdAt time.Time) AdminQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) CreatedAtGt(createdAt time.Time) AdminQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) CreatedAtGte(createdAt time.Time) AdminQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) CreatedAtLt(createdAt time.Time) AdminQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) CreatedAtLte(createdAt time.Time) AdminQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) CreatedAtNe(createdAt time.Time) AdminQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// CreatedByEq is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) CreatedByEq(createdBy uint64) AdminQuerySet {
	return qs.w(qs.db.Where("created_by = ?", createdBy))
}

// CreatedByGt is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) CreatedByGt(createdBy uint64) AdminQuerySet {
	return qs.w(qs.db.Where("created_by > ?", createdBy))
}

// CreatedByGte is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) CreatedByGte(createdBy uint64) AdminQuerySet {
	return qs.w(qs.db.Where("created_by >= ?", createdBy))
}

// CreatedByIn is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) CreatedByIn(createdBy ...uint64) AdminQuerySet {
	if len(createdBy) == 0 {
		qs.db.AddError(errors.New("must at least pass one createdBy in CreatedByIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("created_by IN (?)", createdBy))
}

// CreatedByIsNotNull is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) CreatedByIsNotNull() AdminQuerySet {
	return qs.w(qs.db.Where("created_by IS NOT NULL"))
}

// CreatedByIsNull is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) CreatedByIsNull() AdminQuerySet {
	return qs.w(qs.db.Where("created_by IS NULL"))
}

// CreatedByLt is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) CreatedByLt(createdBy uint64) AdminQuerySet {
	return qs.w(qs.db.Where("created_by < ?", createdBy))
}

// CreatedByLte is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) CreatedByLte(createdBy uint64) AdminQuerySet {
	return qs.w(qs.db.Where("created_by <= ?", createdBy))
}

// CreatedByNe is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) CreatedByNe(createdBy uint64) AdminQuerySet {
	return qs.w(qs.db.Where("created_by != ?", createdBy))
}

// CreatedByNotIn is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) CreatedByNotIn(createdBy ...uint64) AdminQuerySet {
	if len(createdBy) == 0 {
		qs.db.AddError(errors.New("must at least pass one createdBy in CreatedByNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("created_by NOT IN (?)", createdBy))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) Delete() error {
	return qs.db.Delete(Admin{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Admin{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Admin{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) DeletedAtEq(deletedAt time.Time) AdminQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) DeletedAtGt(deletedAt time.Time) AdminQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) DeletedAtGte(deletedAt time.Time) AdminQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) DeletedAtIsNotNull() AdminQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) DeletedAtIsNull() AdminQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) DeletedAtLt(deletedAt time.Time) AdminQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) DeletedAtLte(deletedAt time.Time) AdminQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) DeletedAtNe(deletedAt time.Time) AdminQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) GetUpdater() AdminUpdater {
	return NewAdminUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) IDEq(ID uint64) AdminQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) IDGt(ID uint64) AdminQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) IDGte(ID uint64) AdminQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) IDIn(ID ...uint64) AdminQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) IDLt(ID uint64) AdminQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) IDLte(ID uint64) AdminQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) IDNe(ID uint64) AdminQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) IDNotIn(ID ...uint64) AdminQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) Limit(limit int) AdminQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// LoginNameEq is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) LoginNameEq(loginName string) AdminQuerySet {
	return qs.w(qs.db.Where("login_name = ?", loginName))
}

// LoginNameIn is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) LoginNameIn(loginName ...string) AdminQuerySet {
	if len(loginName) == 0 {
		qs.db.AddError(errors.New("must at least pass one loginName in LoginNameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("login_name IN (?)", loginName))
}

// LoginNameIsNotNull is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) LoginNameIsNotNull() AdminQuerySet {
	return qs.w(qs.db.Where("login_name IS NOT NULL"))
}

// LoginNameIsNull is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) LoginNameIsNull() AdminQuerySet {
	return qs.w(qs.db.Where("login_name IS NULL"))
}

// LoginNameLike is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) LoginNameLike(loginName string) AdminQuerySet {
	return qs.w(qs.db.Where("login_name LIKE ?", loginName))
}

// LoginNameNe is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) LoginNameNe(loginName string) AdminQuerySet {
	return qs.w(qs.db.Where("login_name != ?", loginName))
}

// LoginNameNotIn is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) LoginNameNotIn(loginName ...string) AdminQuerySet {
	if len(loginName) == 0 {
		qs.db.AddError(errors.New("must at least pass one loginName in LoginNameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("login_name NOT IN (?)", loginName))
}

// LoginNameNotlike is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) LoginNameNotlike(loginName string) AdminQuerySet {
	return qs.w(qs.db.Where("login_name NOT LIKE ?", loginName))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) Offset(offset int) AdminQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs AdminQuerySet) One(ret *Admin) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) OrderAscByCreatedAt() AdminQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByCreatedBy is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) OrderAscByCreatedBy() AdminQuerySet {
	return qs.w(qs.db.Order("created_by ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) OrderAscByDeletedAt() AdminQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) OrderAscByID() AdminQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) OrderAscByUpdatedAt() AdminQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) OrderDescByCreatedAt() AdminQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByCreatedBy is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) OrderDescByCreatedBy() AdminQuerySet {
	return qs.w(qs.db.Order("created_by DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) OrderDescByDeletedAt() AdminQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) OrderDescByID() AdminQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) OrderDescByUpdatedAt() AdminQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// PasswordEq is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) PasswordEq(password string) AdminQuerySet {
	return qs.w(qs.db.Where("password = ?", password))
}

// PasswordIn is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) PasswordIn(password ...string) AdminQuerySet {
	if len(password) == 0 {
		qs.db.AddError(errors.New("must at least pass one password in PasswordIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("password IN (?)", password))
}

// PasswordIsNotNull is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) PasswordIsNotNull() AdminQuerySet {
	return qs.w(qs.db.Where("password IS NOT NULL"))
}

// PasswordIsNull is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) PasswordIsNull() AdminQuerySet {
	return qs.w(qs.db.Where("password IS NULL"))
}

// PasswordLike is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) PasswordLike(password string) AdminQuerySet {
	return qs.w(qs.db.Where("password LIKE ?", password))
}

// PasswordNe is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) PasswordNe(password string) AdminQuerySet {
	return qs.w(qs.db.Where("password != ?", password))
}

// PasswordNotIn is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) PasswordNotIn(password ...string) AdminQuerySet {
	if len(password) == 0 {
		qs.db.AddError(errors.New("must at least pass one password in PasswordNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("password NOT IN (?)", password))
}

// PasswordNotlike is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) PasswordNotlike(password string) AdminQuerySet {
	return qs.w(qs.db.Where("password NOT LIKE ?", password))
}

// SaltEq is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) SaltEq(salt string) AdminQuerySet {
	return qs.w(qs.db.Where("salt = ?", salt))
}

// SaltIn is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) SaltIn(salt ...string) AdminQuerySet {
	if len(salt) == 0 {
		qs.db.AddError(errors.New("must at least pass one salt in SaltIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("salt IN (?)", salt))
}

// SaltIsNotNull is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) SaltIsNotNull() AdminQuerySet {
	return qs.w(qs.db.Where("salt IS NOT NULL"))
}

// SaltIsNull is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) SaltIsNull() AdminQuerySet {
	return qs.w(qs.db.Where("salt IS NULL"))
}

// SaltLike is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) SaltLike(salt string) AdminQuerySet {
	return qs.w(qs.db.Where("salt LIKE ?", salt))
}

// SaltNe is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) SaltNe(salt string) AdminQuerySet {
	return qs.w(qs.db.Where("salt != ?", salt))
}

// SaltNotIn is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) SaltNotIn(salt ...string) AdminQuerySet {
	if len(salt) == 0 {
		qs.db.AddError(errors.New("must at least pass one salt in SaltNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("salt NOT IN (?)", salt))
}

// SaltNotlike is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) SaltNotlike(salt string) AdminQuerySet {
	return qs.w(qs.db.Where("salt NOT LIKE ?", salt))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) UpdatedAtEq(updatedAt time.Time) AdminQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) UpdatedAtGt(updatedAt time.Time) AdminQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) UpdatedAtGte(updatedAt time.Time) AdminQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) UpdatedAtLt(updatedAt time.Time) AdminQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) UpdatedAtLte(updatedAt time.Time) AdminQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs AdminQuerySet) UpdatedAtNe(updatedAt time.Time) AdminQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u AdminUpdater) SetCreatedAt(createdAt time.Time) AdminUpdater {
	u.fields[string(AdminDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCreatedBy is an autogenerated method
// nolint: dupl
func (u AdminUpdater) SetCreatedBy(createdBy *uint64) AdminUpdater {
	u.fields[string(AdminDBSchema.CreatedBy)] = createdBy
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u AdminUpdater) SetDeletedAt(deletedAt *time.Time) AdminUpdater {
	u.fields[string(AdminDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u AdminUpdater) SetID(ID uint64) AdminUpdater {
	u.fields[string(AdminDBSchema.ID)] = ID
	return u
}

// SetLoginName is an autogenerated method
// nolint: dupl
func (u AdminUpdater) SetLoginName(loginName *string) AdminUpdater {
	u.fields[string(AdminDBSchema.LoginName)] = loginName
	return u
}

// SetPassword is an autogenerated method
// nolint: dupl
func (u AdminUpdater) SetPassword(password *string) AdminUpdater {
	u.fields[string(AdminDBSchema.Password)] = password
	return u
}

// SetSalt is an autogenerated method
// nolint: dupl
func (u AdminUpdater) SetSalt(salt *string) AdminUpdater {
	u.fields[string(AdminDBSchema.Salt)] = salt
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u AdminUpdater) SetUpdatedAt(updatedAt time.Time) AdminUpdater {
	u.fields[string(AdminDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u AdminUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u AdminUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set AdminQuerySet

// ===== BEGIN of Admin modifiers

// AdminDBSchemaField describes database schema field. It requires for method 'Update'
type AdminDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f AdminDBSchemaField) String() string {
	return string(f)
}

// AdminDBSchema stores db field names of Admin
var AdminDBSchema = struct {
	ID        AdminDBSchemaField
	CreatedAt AdminDBSchemaField
	UpdatedAt AdminDBSchemaField
	DeletedAt AdminDBSchemaField
	LoginName AdminDBSchemaField
	Password  AdminDBSchemaField
	Salt      AdminDBSchemaField
	CreatedBy AdminDBSchemaField
}{

	ID:        AdminDBSchemaField("id"),
	CreatedAt: AdminDBSchemaField("created_at"),
	UpdatedAt: AdminDBSchemaField("updated_at"),
	DeletedAt: AdminDBSchemaField("deleted_at"),
	LoginName: AdminDBSchemaField("login_name"),
	Password:  AdminDBSchemaField("password"),
	Salt:      AdminDBSchemaField("salt"),
	CreatedBy: AdminDBSchemaField("created_by"),
}

// Update updates Admin fields by primary key
// nolint: dupl
func (o *Admin) Update(db *gorm.DB, fields ...AdminDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"created_at": o.CreatedAt,
		"updated_at": o.UpdatedAt,
		"deleted_at": o.DeletedAt,
		"login_name": o.LoginName,
		"password":   o.Password,
		"salt":       o.Salt,
		"created_by": o.CreatedBy,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Admin %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// AdminUpdater is an Admin updates manager
type AdminUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewAdminUpdater creates new Admin updater
// nolint: dupl
func NewAdminUpdater(db *gorm.DB) AdminUpdater {
	return AdminUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Admin{}),
	}
}

// ===== END of Admin modifiers

// ===== BEGIN of query set ConfigQuerySet

// ConfigQuerySet is an queryset type for Config
type ConfigQuerySet struct {
	db *gorm.DB
}

// NewConfigQuerySet constructs new ConfigQuerySet
func NewConfigQuerySet(db *gorm.DB) ConfigQuerySet {
	return ConfigQuerySet{
		db: db.Model(&Config{}),
	}
}

func (qs ConfigQuerySet) w(db *gorm.DB) ConfigQuerySet {
	return NewConfigQuerySet(db)
}

// Create is an autogenerated method
// nolint: dupl
func (o *Config) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Config) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) All(ret *[]Config) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) CreatedAtEq(createdAt time.Time) ConfigQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) CreatedAtGt(createdAt time.Time) ConfigQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) CreatedAtGte(createdAt time.Time) ConfigQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) CreatedAtLt(createdAt time.Time) ConfigQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) CreatedAtLte(createdAt time.Time) ConfigQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) CreatedAtNe(createdAt time.Time) ConfigQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) Delete() error {
	return qs.db.Delete(Config{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Config{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Config{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) DeletedAtEq(deletedAt time.Time) ConfigQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) DeletedAtGt(deletedAt time.Time) ConfigQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) DeletedAtGte(deletedAt time.Time) ConfigQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) DeletedAtIsNotNull() ConfigQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) DeletedAtIsNull() ConfigQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) DeletedAtLt(deletedAt time.Time) ConfigQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) DeletedAtLte(deletedAt time.Time) ConfigQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) DeletedAtNe(deletedAt time.Time) ConfigQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) GetUpdater() ConfigUpdater {
	return NewConfigUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) IDEq(ID uint64) ConfigQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) IDGt(ID uint64) ConfigQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) IDGte(ID uint64) ConfigQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) IDIn(ID ...uint64) ConfigQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) IDLt(ID uint64) ConfigQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) IDLte(ID uint64) ConfigQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) IDNe(ID uint64) ConfigQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) IDNotIn(ID ...uint64) ConfigQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// KeyEq is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) KeyEq(key string) ConfigQuerySet {
	return qs.w(qs.db.Where("key = ?", key))
}

// KeyIn is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) KeyIn(key ...string) ConfigQuerySet {
	if len(key) == 0 {
		qs.db.AddError(errors.New("must at least pass one key in KeyIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("key IN (?)", key))
}

// KeyIsNotNull is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) KeyIsNotNull() ConfigQuerySet {
	return qs.w(qs.db.Where("key IS NOT NULL"))
}

// KeyIsNull is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) KeyIsNull() ConfigQuerySet {
	return qs.w(qs.db.Where("key IS NULL"))
}

// KeyLike is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) KeyLike(key string) ConfigQuerySet {
	return qs.w(qs.db.Where("key LIKE ?", key))
}

// KeyNe is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) KeyNe(key string) ConfigQuerySet {
	return qs.w(qs.db.Where("key != ?", key))
}

// KeyNotIn is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) KeyNotIn(key ...string) ConfigQuerySet {
	if len(key) == 0 {
		qs.db.AddError(errors.New("must at least pass one key in KeyNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("key NOT IN (?)", key))
}

// KeyNotlike is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) KeyNotlike(key string) ConfigQuerySet {
	return qs.w(qs.db.Where("key NOT LIKE ?", key))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) Limit(limit int) ConfigQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) Offset(offset int) ConfigQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs ConfigQuerySet) One(ret *Config) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) OrderAscByCreatedAt() ConfigQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) OrderAscByDeletedAt() ConfigQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) OrderAscByID() ConfigQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) OrderAscByUpdatedAt() ConfigQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) OrderDescByCreatedAt() ConfigQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) OrderDescByDeletedAt() ConfigQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) OrderDescByID() ConfigQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) OrderDescByUpdatedAt() ConfigQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) UpdatedAtEq(updatedAt time.Time) ConfigQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) UpdatedAtGt(updatedAt time.Time) ConfigQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) UpdatedAtGte(updatedAt time.Time) ConfigQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) UpdatedAtLt(updatedAt time.Time) ConfigQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) UpdatedAtLte(updatedAt time.Time) ConfigQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) UpdatedAtNe(updatedAt time.Time) ConfigQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ValueEq is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) ValueEq(value json.RawMessage) ConfigQuerySet {
	return qs.w(qs.db.Where("value = ?", value))
}

// ValueIn is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) ValueIn(value ...json.RawMessage) ConfigQuerySet {
	if len(value) == 0 {
		qs.db.AddError(errors.New("must at least pass one value in ValueIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("value IN (?)", value))
}

// ValueNe is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) ValueNe(value json.RawMessage) ConfigQuerySet {
	return qs.w(qs.db.Where("value != ?", value))
}

// ValueNotIn is an autogenerated method
// nolint: dupl
func (qs ConfigQuerySet) ValueNotIn(value ...json.RawMessage) ConfigQuerySet {
	if len(value) == 0 {
		qs.db.AddError(errors.New("must at least pass one value in ValueNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("value NOT IN (?)", value))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u ConfigUpdater) SetCreatedAt(createdAt time.Time) ConfigUpdater {
	u.fields[string(ConfigDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u ConfigUpdater) SetDeletedAt(deletedAt *time.Time) ConfigUpdater {
	u.fields[string(ConfigDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u ConfigUpdater) SetID(ID uint64) ConfigUpdater {
	u.fields[string(ConfigDBSchema.ID)] = ID
	return u
}

// SetKey is an autogenerated method
// nolint: dupl
func (u ConfigUpdater) SetKey(key *string) ConfigUpdater {
	u.fields[string(ConfigDBSchema.Key)] = key
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u ConfigUpdater) SetUpdatedAt(updatedAt time.Time) ConfigUpdater {
	u.fields[string(ConfigDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetValue is an autogenerated method
// nolint: dupl
func (u ConfigUpdater) SetValue(value json.RawMessage) ConfigUpdater {
	u.fields[string(ConfigDBSchema.Value)] = value
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u ConfigUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u ConfigUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set ConfigQuerySet

// ===== BEGIN of Config modifiers

// ConfigDBSchemaField describes database schema field. It requires for method 'Update'
type ConfigDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f ConfigDBSchemaField) String() string {
	return string(f)
}

// ConfigDBSchema stores db field names of Config
var ConfigDBSchema = struct {
	ID        ConfigDBSchemaField
	CreatedAt ConfigDBSchemaField
	UpdatedAt ConfigDBSchemaField
	DeletedAt ConfigDBSchemaField
	Key       ConfigDBSchemaField
	Value     ConfigDBSchemaField
}{

	ID:        ConfigDBSchemaField("id"),
	CreatedAt: ConfigDBSchemaField("created_at"),
	UpdatedAt: ConfigDBSchemaField("updated_at"),
	DeletedAt: ConfigDBSchemaField("deleted_at"),
	Key:       ConfigDBSchemaField("key"),
	Value:     ConfigDBSchemaField("value"),
}

// Update updates Config fields by primary key
// nolint: dupl
func (o *Config) Update(db *gorm.DB, fields ...ConfigDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"created_at": o.CreatedAt,
		"updated_at": o.UpdatedAt,
		"deleted_at": o.DeletedAt,
		"key":        o.Key,
		"value":      o.Value,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Config %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// ConfigUpdater is an Config updates manager
type ConfigUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewConfigUpdater creates new Config updater
// nolint: dupl
func NewConfigUpdater(db *gorm.DB) ConfigUpdater {
	return ConfigUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Config{}),
	}
}

// ===== END of Config modifiers

// ===== BEGIN of query set HostQuerySet

// HostQuerySet is an queryset type for Host
type HostQuerySet struct {
	db *gorm.DB
}

// NewHostQuerySet constructs new HostQuerySet
func NewHostQuerySet(db *gorm.DB) HostQuerySet {
	return HostQuerySet{
		db: db.Model(&Host{}),
	}
}

func (qs HostQuerySet) w(db *gorm.DB) HostQuerySet {
	return NewHostQuerySet(db)
}

// Create is an autogenerated method
// nolint: dupl
func (o *Host) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Host) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) All(ret *[]Host) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) CreatedAtEq(createdAt time.Time) HostQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) CreatedAtGt(createdAt time.Time) HostQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) CreatedAtGte(createdAt time.Time) HostQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) CreatedAtLt(createdAt time.Time) HostQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) CreatedAtLte(createdAt time.Time) HostQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) CreatedAtNe(createdAt time.Time) HostQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// CreatorIDEq is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) CreatorIDEq(creatorID uint64) HostQuerySet {
	return qs.w(qs.db.Where("creator_id = ?", creatorID))
}

// CreatorIDGt is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) CreatorIDGt(creatorID uint64) HostQuerySet {
	return qs.w(qs.db.Where("creator_id > ?", creatorID))
}

// CreatorIDGte is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) CreatorIDGte(creatorID uint64) HostQuerySet {
	return qs.w(qs.db.Where("creator_id >= ?", creatorID))
}

// CreatorIDIn is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) CreatorIDIn(creatorID ...uint64) HostQuerySet {
	if len(creatorID) == 0 {
		qs.db.AddError(errors.New("must at least pass one creatorID in CreatorIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator_id IN (?)", creatorID))
}

// CreatorIDIsNotNull is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) CreatorIDIsNotNull() HostQuerySet {
	return qs.w(qs.db.Where("creator_id IS NOT NULL"))
}

// CreatorIDIsNull is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) CreatorIDIsNull() HostQuerySet {
	return qs.w(qs.db.Where("creator_id IS NULL"))
}

// CreatorIDLt is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) CreatorIDLt(creatorID uint64) HostQuerySet {
	return qs.w(qs.db.Where("creator_id < ?", creatorID))
}

// CreatorIDLte is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) CreatorIDLte(creatorID uint64) HostQuerySet {
	return qs.w(qs.db.Where("creator_id <= ?", creatorID))
}

// CreatorIDNe is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) CreatorIDNe(creatorID uint64) HostQuerySet {
	return qs.w(qs.db.Where("creator_id != ?", creatorID))
}

// CreatorIDNotIn is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) CreatorIDNotIn(creatorID ...uint64) HostQuerySet {
	if len(creatorID) == 0 {
		qs.db.AddError(errors.New("must at least pass one creatorID in CreatorIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator_id NOT IN (?)", creatorID))
}

// CreatorIsNotNull is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) CreatorIsNotNull() HostQuerySet {
	return qs.w(qs.db.Where("creator IS NOT NULL"))
}

// CreatorIsNull is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) CreatorIsNull() HostQuerySet {
	return qs.w(qs.db.Where("creator IS NULL"))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) Delete() error {
	return qs.db.Delete(Host{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Host{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Host{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) DeletedAtEq(deletedAt time.Time) HostQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) DeletedAtGt(deletedAt time.Time) HostQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) DeletedAtGte(deletedAt time.Time) HostQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) DeletedAtIsNotNull() HostQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) DeletedAtIsNull() HostQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) DeletedAtLt(deletedAt time.Time) HostQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) DeletedAtLte(deletedAt time.Time) HostQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) DeletedAtNe(deletedAt time.Time) HostQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) GetUpdater() HostUpdater {
	return NewHostUpdater(qs.db)
}

// HostNameEq is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) HostNameEq(hostName string) HostQuerySet {
	return qs.w(qs.db.Where("host_name = ?", hostName))
}

// HostNameIn is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) HostNameIn(hostName ...string) HostQuerySet {
	if len(hostName) == 0 {
		qs.db.AddError(errors.New("must at least pass one hostName in HostNameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("host_name IN (?)", hostName))
}

// HostNameIsNotNull is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) HostNameIsNotNull() HostQuerySet {
	return qs.w(qs.db.Where("host_name IS NOT NULL"))
}

// HostNameIsNull is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) HostNameIsNull() HostQuerySet {
	return qs.w(qs.db.Where("host_name IS NULL"))
}

// HostNameLike is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) HostNameLike(hostName string) HostQuerySet {
	return qs.w(qs.db.Where("host_name LIKE ?", hostName))
}

// HostNameNe is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) HostNameNe(hostName string) HostQuerySet {
	return qs.w(qs.db.Where("host_name != ?", hostName))
}

// HostNameNotIn is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) HostNameNotIn(hostName ...string) HostQuerySet {
	if len(hostName) == 0 {
		qs.db.AddError(errors.New("must at least pass one hostName in HostNameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("host_name NOT IN (?)", hostName))
}

// HostNameNotlike is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) HostNameNotlike(hostName string) HostQuerySet {
	return qs.w(qs.db.Where("host_name NOT LIKE ?", hostName))
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) IDEq(ID uint64) HostQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) IDGt(ID uint64) HostQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) IDGte(ID uint64) HostQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) IDIn(ID ...uint64) HostQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) IDLt(ID uint64) HostQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) IDLte(ID uint64) HostQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) IDNe(ID uint64) HostQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) IDNotIn(ID ...uint64) HostQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// InterfacesEq is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) InterfacesEq(interfaces json.RawMessage) HostQuerySet {
	return qs.w(qs.db.Where("interfaces = ?", interfaces))
}

// InterfacesIn is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) InterfacesIn(interfaces ...json.RawMessage) HostQuerySet {
	if len(interfaces) == 0 {
		qs.db.AddError(errors.New("must at least pass one interfaces in InterfacesIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("interfaces IN (?)", interfaces))
}

// InterfacesNe is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) InterfacesNe(interfaces json.RawMessage) HostQuerySet {
	return qs.w(qs.db.Where("interfaces != ?", interfaces))
}

// InterfacesNotIn is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) InterfacesNotIn(interfaces ...json.RawMessage) HostQuerySet {
	if len(interfaces) == 0 {
		qs.db.AddError(errors.New("must at least pass one interfaces in InterfacesNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("interfaces NOT IN (?)", interfaces))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) Limit(limit int) HostQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// MarkEq is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) MarkEq(mark string) HostQuerySet {
	return qs.w(qs.db.Where("mark = ?", mark))
}

// MarkIn is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) MarkIn(mark ...string) HostQuerySet {
	if len(mark) == 0 {
		qs.db.AddError(errors.New("must at least pass one mark in MarkIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("mark IN (?)", mark))
}

// MarkIsNotNull is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) MarkIsNotNull() HostQuerySet {
	return qs.w(qs.db.Where("mark IS NOT NULL"))
}

// MarkIsNull is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) MarkIsNull() HostQuerySet {
	return qs.w(qs.db.Where("mark IS NULL"))
}

// MarkLike is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) MarkLike(mark string) HostQuerySet {
	return qs.w(qs.db.Where("mark LIKE ?", mark))
}

// MarkNe is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) MarkNe(mark string) HostQuerySet {
	return qs.w(qs.db.Where("mark != ?", mark))
}

// MarkNotIn is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) MarkNotIn(mark ...string) HostQuerySet {
	if len(mark) == 0 {
		qs.db.AddError(errors.New("must at least pass one mark in MarkNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("mark NOT IN (?)", mark))
}

// MarkNotlike is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) MarkNotlike(mark string) HostQuerySet {
	return qs.w(qs.db.Where("mark NOT LIKE ?", mark))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) Offset(offset int) HostQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs HostQuerySet) One(ret *Host) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) OrderAscByCreatedAt() HostQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByCreatorID is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) OrderAscByCreatorID() HostQuerySet {
	return qs.w(qs.db.Order("creator_id ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) OrderAscByDeletedAt() HostQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) OrderAscByID() HostQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) OrderAscByUpdatedAt() HostQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) OrderDescByCreatedAt() HostQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByCreatorID is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) OrderDescByCreatorID() HostQuerySet {
	return qs.w(qs.db.Order("creator_id DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) OrderDescByDeletedAt() HostQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) OrderDescByID() HostQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) OrderDescByUpdatedAt() HostQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// PreloadCreator is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) PreloadCreator() HostQuerySet {
	return qs.w(qs.db.Preload("Creator"))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) UpdatedAtEq(updatedAt time.Time) HostQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) UpdatedAtGt(updatedAt time.Time) HostQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) UpdatedAtGte(updatedAt time.Time) HostQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) UpdatedAtLt(updatedAt time.Time) HostQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) UpdatedAtLte(updatedAt time.Time) HostQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs HostQuerySet) UpdatedAtNe(updatedAt time.Time) HostQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u HostUpdater) SetCreatedAt(createdAt time.Time) HostUpdater {
	u.fields[string(HostDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCreatorID is an autogenerated method
// nolint: dupl
func (u HostUpdater) SetCreatorID(creatorID *uint64) HostUpdater {
	u.fields[string(HostDBSchema.CreatorID)] = creatorID
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u HostUpdater) SetDeletedAt(deletedAt *time.Time) HostUpdater {
	u.fields[string(HostDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetHostName is an autogenerated method
// nolint: dupl
func (u HostUpdater) SetHostName(hostName *string) HostUpdater {
	u.fields[string(HostDBSchema.HostName)] = hostName
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u HostUpdater) SetID(ID uint64) HostUpdater {
	u.fields[string(HostDBSchema.ID)] = ID
	return u
}

// SetInterfaces is an autogenerated method
// nolint: dupl
func (u HostUpdater) SetInterfaces(interfaces json.RawMessage) HostUpdater {
	u.fields[string(HostDBSchema.Interfaces)] = interfaces
	return u
}

// SetMark is an autogenerated method
// nolint: dupl
func (u HostUpdater) SetMark(mark *string) HostUpdater {
	u.fields[string(HostDBSchema.Mark)] = mark
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u HostUpdater) SetUpdatedAt(updatedAt time.Time) HostUpdater {
	u.fields[string(HostDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u HostUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u HostUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set HostQuerySet

// ===== BEGIN of Host modifiers

// HostDBSchemaField describes database schema field. It requires for method 'Update'
type HostDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f HostDBSchemaField) String() string {
	return string(f)
}

// HostDBSchema stores db field names of Host
var HostDBSchema = struct {
	ID         HostDBSchemaField
	CreatedAt  HostDBSchemaField
	UpdatedAt  HostDBSchemaField
	DeletedAt  HostDBSchemaField
	HostName   HostDBSchemaField
	Mark       HostDBSchemaField
	CreatorID  HostDBSchemaField
	Creator    HostDBSchemaField
	Interfaces HostDBSchemaField
}{

	ID:         HostDBSchemaField("id"),
	CreatedAt:  HostDBSchemaField("created_at"),
	UpdatedAt:  HostDBSchemaField("updated_at"),
	DeletedAt:  HostDBSchemaField("deleted_at"),
	HostName:   HostDBSchemaField("host_name"),
	Mark:       HostDBSchemaField("mark"),
	CreatorID:  HostDBSchemaField("creator_id"),
	Creator:    HostDBSchemaField("creator"),
	Interfaces: HostDBSchemaField("interfaces"),
}

// Update updates Host fields by primary key
// nolint: dupl
func (o *Host) Update(db *gorm.DB, fields ...HostDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"created_at": o.CreatedAt,
		"updated_at": o.UpdatedAt,
		"deleted_at": o.DeletedAt,
		"host_name":  o.HostName,
		"mark":       o.Mark,
		"creator_id": o.CreatorID,
		"creator":    o.Creator,
		"interfaces": o.Interfaces,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Host %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// HostUpdater is an Host updates manager
type HostUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewHostUpdater creates new Host updater
// nolint: dupl
func NewHostUpdater(db *gorm.DB) HostUpdater {
	return HostUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Host{}),
	}
}

// ===== END of Host modifiers

// ===== BEGIN of query set KeyboardQuerySet

// KeyboardQuerySet is an queryset type for Keyboard
type KeyboardQuerySet struct {
	db *gorm.DB
}

// NewKeyboardQuerySet constructs new KeyboardQuerySet
func NewKeyboardQuerySet(db *gorm.DB) KeyboardQuerySet {
	return KeyboardQuerySet{
		db: db.Model(&Keyboard{}),
	}
}

func (qs KeyboardQuerySet) w(db *gorm.DB) KeyboardQuerySet {
	return NewKeyboardQuerySet(db)
}

// Create is an autogenerated method
// nolint: dupl
func (o *Keyboard) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Keyboard) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) All(ret *[]Keyboard) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) CreatedAtEq(createdAt time.Time) KeyboardQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) CreatedAtGt(createdAt time.Time) KeyboardQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) CreatedAtGte(createdAt time.Time) KeyboardQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) CreatedAtLt(createdAt time.Time) KeyboardQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) CreatedAtLte(createdAt time.Time) KeyboardQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) CreatedAtNe(createdAt time.Time) KeyboardQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) Delete() error {
	return qs.db.Delete(Keyboard{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Keyboard{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Keyboard{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) DeletedAtEq(deletedAt time.Time) KeyboardQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) DeletedAtGt(deletedAt time.Time) KeyboardQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) DeletedAtGte(deletedAt time.Time) KeyboardQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) DeletedAtIsNotNull() KeyboardQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) DeletedAtIsNull() KeyboardQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) DeletedAtLt(deletedAt time.Time) KeyboardQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) DeletedAtLte(deletedAt time.Time) KeyboardQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) DeletedAtNe(deletedAt time.Time) KeyboardQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) GetUpdater() KeyboardUpdater {
	return NewKeyboardUpdater(qs.db)
}

// HostIDEq is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) HostIDEq(hostID uint64) KeyboardQuerySet {
	return qs.w(qs.db.Where("host_id = ?", hostID))
}

// HostIDGt is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) HostIDGt(hostID uint64) KeyboardQuerySet {
	return qs.w(qs.db.Where("host_id > ?", hostID))
}

// HostIDGte is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) HostIDGte(hostID uint64) KeyboardQuerySet {
	return qs.w(qs.db.Where("host_id >= ?", hostID))
}

// HostIDIn is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) HostIDIn(hostID ...uint64) KeyboardQuerySet {
	if len(hostID) == 0 {
		qs.db.AddError(errors.New("must at least pass one hostID in HostIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("host_id IN (?)", hostID))
}

// HostIDIsNotNull is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) HostIDIsNotNull() KeyboardQuerySet {
	return qs.w(qs.db.Where("host_id IS NOT NULL"))
}

// HostIDIsNull is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) HostIDIsNull() KeyboardQuerySet {
	return qs.w(qs.db.Where("host_id IS NULL"))
}

// HostIDLt is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) HostIDLt(hostID uint64) KeyboardQuerySet {
	return qs.w(qs.db.Where("host_id < ?", hostID))
}

// HostIDLte is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) HostIDLte(hostID uint64) KeyboardQuerySet {
	return qs.w(qs.db.Where("host_id <= ?", hostID))
}

// HostIDNe is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) HostIDNe(hostID uint64) KeyboardQuerySet {
	return qs.w(qs.db.Where("host_id != ?", hostID))
}

// HostIDNotIn is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) HostIDNotIn(hostID ...uint64) KeyboardQuerySet {
	if len(hostID) == 0 {
		qs.db.AddError(errors.New("must at least pass one hostID in HostIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("host_id NOT IN (?)", hostID))
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) IDEq(ID uint64) KeyboardQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) IDGt(ID uint64) KeyboardQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) IDGte(ID uint64) KeyboardQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) IDIn(ID ...uint64) KeyboardQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) IDLt(ID uint64) KeyboardQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) IDLte(ID uint64) KeyboardQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) IDNe(ID uint64) KeyboardQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) IDNotIn(ID ...uint64) KeyboardQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// KeysEq is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) KeysEq(keys json.RawMessage) KeyboardQuerySet {
	return qs.w(qs.db.Where("keys = ?", keys))
}

// KeysIn is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) KeysIn(keys ...json.RawMessage) KeyboardQuerySet {
	if len(keys) == 0 {
		qs.db.AddError(errors.New("must at least pass one keys in KeysIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("keys IN (?)", keys))
}

// KeysNe is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) KeysNe(keys json.RawMessage) KeyboardQuerySet {
	return qs.w(qs.db.Where("keys != ?", keys))
}

// KeysNotIn is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) KeysNotIn(keys ...json.RawMessage) KeyboardQuerySet {
	if len(keys) == 0 {
		qs.db.AddError(errors.New("must at least pass one keys in KeysNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("keys NOT IN (?)", keys))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) Limit(limit int) KeyboardQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) Offset(offset int) KeyboardQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs KeyboardQuerySet) One(ret *Keyboard) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) OrderAscByCreatedAt() KeyboardQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) OrderAscByDeletedAt() KeyboardQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByHostID is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) OrderAscByHostID() KeyboardQuerySet {
	return qs.w(qs.db.Order("host_id ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) OrderAscByID() KeyboardQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) OrderAscByUpdatedAt() KeyboardQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) OrderDescByCreatedAt() KeyboardQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) OrderDescByDeletedAt() KeyboardQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByHostID is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) OrderDescByHostID() KeyboardQuerySet {
	return qs.w(qs.db.Order("host_id DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) OrderDescByID() KeyboardQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) OrderDescByUpdatedAt() KeyboardQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) UpdatedAtEq(updatedAt time.Time) KeyboardQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) UpdatedAtGt(updatedAt time.Time) KeyboardQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) UpdatedAtGte(updatedAt time.Time) KeyboardQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) UpdatedAtLt(updatedAt time.Time) KeyboardQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) UpdatedAtLte(updatedAt time.Time) KeyboardQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs KeyboardQuerySet) UpdatedAtNe(updatedAt time.Time) KeyboardQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u KeyboardUpdater) SetCreatedAt(createdAt time.Time) KeyboardUpdater {
	u.fields[string(KeyboardDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u KeyboardUpdater) SetDeletedAt(deletedAt *time.Time) KeyboardUpdater {
	u.fields[string(KeyboardDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetHostID is an autogenerated method
// nolint: dupl
func (u KeyboardUpdater) SetHostID(hostID *uint64) KeyboardUpdater {
	u.fields[string(KeyboardDBSchema.HostID)] = hostID
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u KeyboardUpdater) SetID(ID uint64) KeyboardUpdater {
	u.fields[string(KeyboardDBSchema.ID)] = ID
	return u
}

// SetKeys is an autogenerated method
// nolint: dupl
func (u KeyboardUpdater) SetKeys(keys json.RawMessage) KeyboardUpdater {
	u.fields[string(KeyboardDBSchema.Keys)] = keys
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u KeyboardUpdater) SetUpdatedAt(updatedAt time.Time) KeyboardUpdater {
	u.fields[string(KeyboardDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u KeyboardUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u KeyboardUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set KeyboardQuerySet

// ===== BEGIN of Keyboard modifiers

// KeyboardDBSchemaField describes database schema field. It requires for method 'Update'
type KeyboardDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f KeyboardDBSchemaField) String() string {
	return string(f)
}

// KeyboardDBSchema stores db field names of Keyboard
var KeyboardDBSchema = struct {
	ID        KeyboardDBSchemaField
	CreatedAt KeyboardDBSchemaField
	UpdatedAt KeyboardDBSchemaField
	DeletedAt KeyboardDBSchemaField
	HostID    KeyboardDBSchemaField
	Keys      KeyboardDBSchemaField
}{

	ID:        KeyboardDBSchemaField("id"),
	CreatedAt: KeyboardDBSchemaField("created_at"),
	UpdatedAt: KeyboardDBSchemaField("updated_at"),
	DeletedAt: KeyboardDBSchemaField("deleted_at"),
	HostID:    KeyboardDBSchemaField("host_id"),
	Keys:      KeyboardDBSchemaField("keys"),
}

// Update updates Keyboard fields by primary key
// nolint: dupl
func (o *Keyboard) Update(db *gorm.DB, fields ...KeyboardDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"created_at": o.CreatedAt,
		"updated_at": o.UpdatedAt,
		"deleted_at": o.DeletedAt,
		"host_id":    o.HostID,
		"keys":       o.Keys,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Keyboard %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// KeyboardUpdater is an Keyboard updates manager
type KeyboardUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewKeyboardUpdater creates new Keyboard updater
// nolint: dupl
func NewKeyboardUpdater(db *gorm.DB) KeyboardUpdater {
	return KeyboardUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Keyboard{}),
	}
}

// ===== END of Keyboard modifiers

// ===== BEGIN of query set NoticeQuerySet

// NoticeQuerySet is an queryset type for Notice
type NoticeQuerySet struct {
	db *gorm.DB
}

// NewNoticeQuerySet constructs new NoticeQuerySet
func NewNoticeQuerySet(db *gorm.DB) NoticeQuerySet {
	return NoticeQuerySet{
		db: db.Model(&Notice{}),
	}
}

func (qs NoticeQuerySet) w(db *gorm.DB) NoticeQuerySet {
	return NewNoticeQuerySet(db)
}

// Create is an autogenerated method
// nolint: dupl
func (o *Notice) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Notice) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) All(ret *[]Notice) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) CreatedAtEq(createdAt time.Time) NoticeQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) CreatedAtGt(createdAt time.Time) NoticeQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) CreatedAtGte(createdAt time.Time) NoticeQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) CreatedAtLt(createdAt time.Time) NoticeQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) CreatedAtLte(createdAt time.Time) NoticeQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) CreatedAtNe(createdAt time.Time) NoticeQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// CreatorIDEq is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) CreatorIDEq(creatorID uint64) NoticeQuerySet {
	return qs.w(qs.db.Where("creator_id = ?", creatorID))
}

// CreatorIDGt is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) CreatorIDGt(creatorID uint64) NoticeQuerySet {
	return qs.w(qs.db.Where("creator_id > ?", creatorID))
}

// CreatorIDGte is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) CreatorIDGte(creatorID uint64) NoticeQuerySet {
	return qs.w(qs.db.Where("creator_id >= ?", creatorID))
}

// CreatorIDIn is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) CreatorIDIn(creatorID ...uint64) NoticeQuerySet {
	if len(creatorID) == 0 {
		qs.db.AddError(errors.New("must at least pass one creatorID in CreatorIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator_id IN (?)", creatorID))
}

// CreatorIDIsNotNull is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) CreatorIDIsNotNull() NoticeQuerySet {
	return qs.w(qs.db.Where("creator_id IS NOT NULL"))
}

// CreatorIDIsNull is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) CreatorIDIsNull() NoticeQuerySet {
	return qs.w(qs.db.Where("creator_id IS NULL"))
}

// CreatorIDLt is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) CreatorIDLt(creatorID uint64) NoticeQuerySet {
	return qs.w(qs.db.Where("creator_id < ?", creatorID))
}

// CreatorIDLte is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) CreatorIDLte(creatorID uint64) NoticeQuerySet {
	return qs.w(qs.db.Where("creator_id <= ?", creatorID))
}

// CreatorIDNe is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) CreatorIDNe(creatorID uint64) NoticeQuerySet {
	return qs.w(qs.db.Where("creator_id != ?", creatorID))
}

// CreatorIDNotIn is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) CreatorIDNotIn(creatorID ...uint64) NoticeQuerySet {
	if len(creatorID) == 0 {
		qs.db.AddError(errors.New("must at least pass one creatorID in CreatorIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator_id NOT IN (?)", creatorID))
}

// CreatorIsNotNull is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) CreatorIsNotNull() NoticeQuerySet {
	return qs.w(qs.db.Where("creator IS NOT NULL"))
}

// CreatorIsNull is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) CreatorIsNull() NoticeQuerySet {
	return qs.w(qs.db.Where("creator IS NULL"))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) Delete() error {
	return qs.db.Delete(Notice{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Notice{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Notice{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) DeletedAtEq(deletedAt time.Time) NoticeQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) DeletedAtGt(deletedAt time.Time) NoticeQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) DeletedAtGte(deletedAt time.Time) NoticeQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) DeletedAtIsNotNull() NoticeQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) DeletedAtIsNull() NoticeQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) DeletedAtLt(deletedAt time.Time) NoticeQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) DeletedAtLte(deletedAt time.Time) NoticeQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) DeletedAtNe(deletedAt time.Time) NoticeQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) GetUpdater() NoticeUpdater {
	return NewNoticeUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) IDEq(ID uint64) NoticeQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) IDGt(ID uint64) NoticeQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) IDGte(ID uint64) NoticeQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) IDIn(ID ...uint64) NoticeQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) IDLt(ID uint64) NoticeQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) IDLte(ID uint64) NoticeQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) IDNe(ID uint64) NoticeQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) IDNotIn(ID ...uint64) NoticeQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) Limit(limit int) NoticeQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NoticeEq is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) NoticeEq(notice string) NoticeQuerySet {
	return qs.w(qs.db.Where("notice = ?", notice))
}

// NoticeIn is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) NoticeIn(notice ...string) NoticeQuerySet {
	if len(notice) == 0 {
		qs.db.AddError(errors.New("must at least pass one notice in NoticeIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("notice IN (?)", notice))
}

// NoticeIsNotNull is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) NoticeIsNotNull() NoticeQuerySet {
	return qs.w(qs.db.Where("notice IS NOT NULL"))
}

// NoticeIsNull is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) NoticeIsNull() NoticeQuerySet {
	return qs.w(qs.db.Where("notice IS NULL"))
}

// NoticeLike is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) NoticeLike(notice string) NoticeQuerySet {
	return qs.w(qs.db.Where("notice LIKE ?", notice))
}

// NoticeNe is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) NoticeNe(notice string) NoticeQuerySet {
	return qs.w(qs.db.Where("notice != ?", notice))
}

// NoticeNotIn is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) NoticeNotIn(notice ...string) NoticeQuerySet {
	if len(notice) == 0 {
		qs.db.AddError(errors.New("must at least pass one notice in NoticeNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("notice NOT IN (?)", notice))
}

// NoticeNotlike is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) NoticeNotlike(notice string) NoticeQuerySet {
	return qs.w(qs.db.Where("notice NOT LIKE ?", notice))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) Offset(offset int) NoticeQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs NoticeQuerySet) One(ret *Notice) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) OrderAscByCreatedAt() NoticeQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByCreatorID is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) OrderAscByCreatorID() NoticeQuerySet {
	return qs.w(qs.db.Order("creator_id ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) OrderAscByDeletedAt() NoticeQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) OrderAscByID() NoticeQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) OrderAscByUpdatedAt() NoticeQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) OrderDescByCreatedAt() NoticeQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByCreatorID is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) OrderDescByCreatorID() NoticeQuerySet {
	return qs.w(qs.db.Order("creator_id DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) OrderDescByDeletedAt() NoticeQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) OrderDescByID() NoticeQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) OrderDescByUpdatedAt() NoticeQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// PreloadCreator is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) PreloadCreator() NoticeQuerySet {
	return qs.w(qs.db.Preload("Creator"))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) UpdatedAtEq(updatedAt time.Time) NoticeQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) UpdatedAtGt(updatedAt time.Time) NoticeQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) UpdatedAtGte(updatedAt time.Time) NoticeQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) UpdatedAtLt(updatedAt time.Time) NoticeQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) UpdatedAtLte(updatedAt time.Time) NoticeQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs NoticeQuerySet) UpdatedAtNe(updatedAt time.Time) NoticeQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u NoticeUpdater) SetCreatedAt(createdAt time.Time) NoticeUpdater {
	u.fields[string(NoticeDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCreatorID is an autogenerated method
// nolint: dupl
func (u NoticeUpdater) SetCreatorID(creatorID *uint64) NoticeUpdater {
	u.fields[string(NoticeDBSchema.CreatorID)] = creatorID
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u NoticeUpdater) SetDeletedAt(deletedAt *time.Time) NoticeUpdater {
	u.fields[string(NoticeDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u NoticeUpdater) SetID(ID uint64) NoticeUpdater {
	u.fields[string(NoticeDBSchema.ID)] = ID
	return u
}

// SetNotice is an autogenerated method
// nolint: dupl
func (u NoticeUpdater) SetNotice(notice *string) NoticeUpdater {
	u.fields[string(NoticeDBSchema.Notice)] = notice
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u NoticeUpdater) SetUpdatedAt(updatedAt time.Time) NoticeUpdater {
	u.fields[string(NoticeDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u NoticeUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u NoticeUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set NoticeQuerySet

// ===== BEGIN of Notice modifiers

// NoticeDBSchemaField describes database schema field. It requires for method 'Update'
type NoticeDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f NoticeDBSchemaField) String() string {
	return string(f)
}

// NoticeDBSchema stores db field names of Notice
var NoticeDBSchema = struct {
	ID        NoticeDBSchemaField
	CreatedAt NoticeDBSchemaField
	UpdatedAt NoticeDBSchemaField
	DeletedAt NoticeDBSchemaField
	Notice    NoticeDBSchemaField
	CreatorID NoticeDBSchemaField
	Creator   NoticeDBSchemaField
}{

	ID:        NoticeDBSchemaField("id"),
	CreatedAt: NoticeDBSchemaField("created_at"),
	UpdatedAt: NoticeDBSchemaField("updated_at"),
	DeletedAt: NoticeDBSchemaField("deleted_at"),
	Notice:    NoticeDBSchemaField("notice"),
	CreatorID: NoticeDBSchemaField("creator_id"),
	Creator:   NoticeDBSchemaField("creator"),
}

// Update updates Notice fields by primary key
// nolint: dupl
func (o *Notice) Update(db *gorm.DB, fields ...NoticeDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"created_at": o.CreatedAt,
		"updated_at": o.UpdatedAt,
		"deleted_at": o.DeletedAt,
		"notice":     o.Notice,
		"creator_id": o.CreatorID,
		"creator":    o.Creator,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Notice %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// NoticeUpdater is an Notice updates manager
type NoticeUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewNoticeUpdater creates new Notice updater
// nolint: dupl
func NewNoticeUpdater(db *gorm.DB) NoticeUpdater {
	return NoticeUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Notice{}),
	}
}

// ===== END of Notice modifiers

// ===== BEGIN of query set RtspQuerySet

// RtspQuerySet is an queryset type for Rtsp
type RtspQuerySet struct {
	db *gorm.DB
}

// NewRtspQuerySet constructs new RtspQuerySet
func NewRtspQuerySet(db *gorm.DB) RtspQuerySet {
	return RtspQuerySet{
		db: db.Model(&Rtsp{}),
	}
}

func (qs RtspQuerySet) w(db *gorm.DB) RtspQuerySet {
	return NewRtspQuerySet(db)
}

// Create is an autogenerated method
// nolint: dupl
func (o *Rtsp) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Rtsp) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) All(ret *[]Rtsp) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) CreatedAtEq(createdAt time.Time) RtspQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) CreatedAtGt(createdAt time.Time) RtspQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) CreatedAtGte(createdAt time.Time) RtspQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) CreatedAtLt(createdAt time.Time) RtspQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) CreatedAtLte(createdAt time.Time) RtspQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) CreatedAtNe(createdAt time.Time) RtspQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// CreatorIDEq is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) CreatorIDEq(creatorID uint64) RtspQuerySet {
	return qs.w(qs.db.Where("creator_id = ?", creatorID))
}

// CreatorIDGt is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) CreatorIDGt(creatorID uint64) RtspQuerySet {
	return qs.w(qs.db.Where("creator_id > ?", creatorID))
}

// CreatorIDGte is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) CreatorIDGte(creatorID uint64) RtspQuerySet {
	return qs.w(qs.db.Where("creator_id >= ?", creatorID))
}

// CreatorIDIn is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) CreatorIDIn(creatorID ...uint64) RtspQuerySet {
	if len(creatorID) == 0 {
		qs.db.AddError(errors.New("must at least pass one creatorID in CreatorIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator_id IN (?)", creatorID))
}

// CreatorIDIsNotNull is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) CreatorIDIsNotNull() RtspQuerySet {
	return qs.w(qs.db.Where("creator_id IS NOT NULL"))
}

// CreatorIDIsNull is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) CreatorIDIsNull() RtspQuerySet {
	return qs.w(qs.db.Where("creator_id IS NULL"))
}

// CreatorIDLt is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) CreatorIDLt(creatorID uint64) RtspQuerySet {
	return qs.w(qs.db.Where("creator_id < ?", creatorID))
}

// CreatorIDLte is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) CreatorIDLte(creatorID uint64) RtspQuerySet {
	return qs.w(qs.db.Where("creator_id <= ?", creatorID))
}

// CreatorIDNe is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) CreatorIDNe(creatorID uint64) RtspQuerySet {
	return qs.w(qs.db.Where("creator_id != ?", creatorID))
}

// CreatorIDNotIn is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) CreatorIDNotIn(creatorID ...uint64) RtspQuerySet {
	if len(creatorID) == 0 {
		qs.db.AddError(errors.New("must at least pass one creatorID in CreatorIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator_id NOT IN (?)", creatorID))
}

// CreatorIsNotNull is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) CreatorIsNotNull() RtspQuerySet {
	return qs.w(qs.db.Where("creator IS NOT NULL"))
}

// CreatorIsNull is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) CreatorIsNull() RtspQuerySet {
	return qs.w(qs.db.Where("creator IS NULL"))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) Delete() error {
	return qs.db.Delete(Rtsp{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Rtsp{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Rtsp{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) DeletedAtEq(deletedAt time.Time) RtspQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) DeletedAtGt(deletedAt time.Time) RtspQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) DeletedAtGte(deletedAt time.Time) RtspQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) DeletedAtIsNotNull() RtspQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) DeletedAtIsNull() RtspQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) DeletedAtLt(deletedAt time.Time) RtspQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) DeletedAtLte(deletedAt time.Time) RtspQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) DeletedAtNe(deletedAt time.Time) RtspQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// ExtEq is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) ExtEq(ext string) RtspQuerySet {
	return qs.w(qs.db.Where("ext = ?", ext))
}

// ExtIn is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) ExtIn(ext ...string) RtspQuerySet {
	if len(ext) == 0 {
		qs.db.AddError(errors.New("must at least pass one ext in ExtIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("ext IN (?)", ext))
}

// ExtIsNotNull is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) ExtIsNotNull() RtspQuerySet {
	return qs.w(qs.db.Where("ext IS NOT NULL"))
}

// ExtIsNull is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) ExtIsNull() RtspQuerySet {
	return qs.w(qs.db.Where("ext IS NULL"))
}

// ExtLike is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) ExtLike(ext string) RtspQuerySet {
	return qs.w(qs.db.Where("ext LIKE ?", ext))
}

// ExtNe is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) ExtNe(ext string) RtspQuerySet {
	return qs.w(qs.db.Where("ext != ?", ext))
}

// ExtNotIn is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) ExtNotIn(ext ...string) RtspQuerySet {
	if len(ext) == 0 {
		qs.db.AddError(errors.New("must at least pass one ext in ExtNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("ext NOT IN (?)", ext))
}

// ExtNotlike is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) ExtNotlike(ext string) RtspQuerySet {
	return qs.w(qs.db.Where("ext NOT LIKE ?", ext))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) GetUpdater() RtspUpdater {
	return NewRtspUpdater(qs.db)
}

// HostIDEq is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) HostIDEq(hostID string) RtspQuerySet {
	return qs.w(qs.db.Where("host_id = ?", hostID))
}

// HostIDIn is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) HostIDIn(hostID ...string) RtspQuerySet {
	if len(hostID) == 0 {
		qs.db.AddError(errors.New("must at least pass one hostID in HostIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("host_id IN (?)", hostID))
}

// HostIDIsNotNull is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) HostIDIsNotNull() RtspQuerySet {
	return qs.w(qs.db.Where("host_id IS NOT NULL"))
}

// HostIDIsNull is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) HostIDIsNull() RtspQuerySet {
	return qs.w(qs.db.Where("host_id IS NULL"))
}

// HostIDLike is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) HostIDLike(hostID string) RtspQuerySet {
	return qs.w(qs.db.Where("host_id LIKE ?", hostID))
}

// HostIDNe is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) HostIDNe(hostID string) RtspQuerySet {
	return qs.w(qs.db.Where("host_id != ?", hostID))
}

// HostIDNotIn is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) HostIDNotIn(hostID ...string) RtspQuerySet {
	if len(hostID) == 0 {
		qs.db.AddError(errors.New("must at least pass one hostID in HostIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("host_id NOT IN (?)", hostID))
}

// HostIDNotlike is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) HostIDNotlike(hostID string) RtspQuerySet {
	return qs.w(qs.db.Where("host_id NOT LIKE ?", hostID))
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) IDEq(ID uint64) RtspQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) IDGt(ID uint64) RtspQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) IDGte(ID uint64) RtspQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) IDIn(ID ...uint64) RtspQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) IDLt(ID uint64) RtspQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) IDLte(ID uint64) RtspQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) IDNe(ID uint64) RtspQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) IDNotIn(ID ...uint64) RtspQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) Limit(limit int) RtspQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) Offset(offset int) RtspQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs RtspQuerySet) One(ret *Rtsp) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) OrderAscByCreatedAt() RtspQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByCreatorID is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) OrderAscByCreatorID() RtspQuerySet {
	return qs.w(qs.db.Order("creator_id ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) OrderAscByDeletedAt() RtspQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) OrderAscByID() RtspQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) OrderAscByUpdatedAt() RtspQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) OrderDescByCreatedAt() RtspQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByCreatorID is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) OrderDescByCreatorID() RtspQuerySet {
	return qs.w(qs.db.Order("creator_id DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) OrderDescByDeletedAt() RtspQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) OrderDescByID() RtspQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) OrderDescByUpdatedAt() RtspQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// PreloadCreator is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) PreloadCreator() RtspQuerySet {
	return qs.w(qs.db.Preload("Creator"))
}

// PreloadHost is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) PreloadHost() RtspQuerySet {
	return qs.w(qs.db.Preload("Host"))
}

// RtspURLEq is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) RtspURLEq(rtspURL string) RtspQuerySet {
	return qs.w(qs.db.Where("rtsp_url = ?", rtspURL))
}

// RtspURLIn is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) RtspURLIn(rtspURL ...string) RtspQuerySet {
	if len(rtspURL) == 0 {
		qs.db.AddError(errors.New("must at least pass one rtspURL in RtspURLIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("rtsp_url IN (?)", rtspURL))
}

// RtspURLIsNotNull is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) RtspURLIsNotNull() RtspQuerySet {
	return qs.w(qs.db.Where("rtsp_url IS NOT NULL"))
}

// RtspURLIsNull is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) RtspURLIsNull() RtspQuerySet {
	return qs.w(qs.db.Where("rtsp_url IS NULL"))
}

// RtspURLLike is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) RtspURLLike(rtspURL string) RtspQuerySet {
	return qs.w(qs.db.Where("rtsp_url LIKE ?", rtspURL))
}

// RtspURLNe is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) RtspURLNe(rtspURL string) RtspQuerySet {
	return qs.w(qs.db.Where("rtsp_url != ?", rtspURL))
}

// RtspURLNotIn is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) RtspURLNotIn(rtspURL ...string) RtspQuerySet {
	if len(rtspURL) == 0 {
		qs.db.AddError(errors.New("must at least pass one rtspURL in RtspURLNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("rtsp_url NOT IN (?)", rtspURL))
}

// RtspURLNotlike is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) RtspURLNotlike(rtspURL string) RtspQuerySet {
	return qs.w(qs.db.Where("rtsp_url NOT LIKE ?", rtspURL))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) UpdatedAtEq(updatedAt time.Time) RtspQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) UpdatedAtGt(updatedAt time.Time) RtspQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) UpdatedAtGte(updatedAt time.Time) RtspQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) UpdatedAtLt(updatedAt time.Time) RtspQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) UpdatedAtLte(updatedAt time.Time) RtspQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs RtspQuerySet) UpdatedAtNe(updatedAt time.Time) RtspQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u RtspUpdater) SetCreatedAt(createdAt time.Time) RtspUpdater {
	u.fields[string(RtspDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCreatorID is an autogenerated method
// nolint: dupl
func (u RtspUpdater) SetCreatorID(creatorID *uint64) RtspUpdater {
	u.fields[string(RtspDBSchema.CreatorID)] = creatorID
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u RtspUpdater) SetDeletedAt(deletedAt *time.Time) RtspUpdater {
	u.fields[string(RtspDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetExt is an autogenerated method
// nolint: dupl
func (u RtspUpdater) SetExt(ext *string) RtspUpdater {
	u.fields[string(RtspDBSchema.Ext)] = ext
	return u
}

// SetHost is an autogenerated method
// nolint: dupl
func (u RtspUpdater) SetHost(host Host) RtspUpdater {
	u.fields[string(RtspDBSchema.Host)] = host
	return u
}

// SetHostID is an autogenerated method
// nolint: dupl
func (u RtspUpdater) SetHostID(hostID *string) RtspUpdater {
	u.fields[string(RtspDBSchema.HostID)] = hostID
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u RtspUpdater) SetID(ID uint64) RtspUpdater {
	u.fields[string(RtspDBSchema.ID)] = ID
	return u
}

// SetRtspURL is an autogenerated method
// nolint: dupl
func (u RtspUpdater) SetRtspURL(rtspURL *string) RtspUpdater {
	u.fields[string(RtspDBSchema.RtspURL)] = rtspURL
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u RtspUpdater) SetUpdatedAt(updatedAt time.Time) RtspUpdater {
	u.fields[string(RtspDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u RtspUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u RtspUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set RtspQuerySet

// ===== BEGIN of Rtsp modifiers

// RtspDBSchemaField describes database schema field. It requires for method 'Update'
type RtspDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f RtspDBSchemaField) String() string {
	return string(f)
}

// RtspDBSchema stores db field names of Rtsp
var RtspDBSchema = struct {
	ID        RtspDBSchemaField
	CreatedAt RtspDBSchemaField
	UpdatedAt RtspDBSchemaField
	DeletedAt RtspDBSchemaField
	CreatorID RtspDBSchemaField
	Creator   RtspDBSchemaField
	RtspURL   RtspDBSchemaField
	HostID    RtspDBSchemaField
	Host      RtspDBSchemaField
	Ext       RtspDBSchemaField
}{

	ID:        RtspDBSchemaField("id"),
	CreatedAt: RtspDBSchemaField("created_at"),
	UpdatedAt: RtspDBSchemaField("updated_at"),
	DeletedAt: RtspDBSchemaField("deleted_at"),
	CreatorID: RtspDBSchemaField("creator_id"),
	Creator:   RtspDBSchemaField("creator"),
	RtspURL:   RtspDBSchemaField("rtsp_url"),
	HostID:    RtspDBSchemaField("host_id"),
	Host:      RtspDBSchemaField("host"),
	Ext:       RtspDBSchemaField("ext"),
}

// Update updates Rtsp fields by primary key
// nolint: dupl
func (o *Rtsp) Update(db *gorm.DB, fields ...RtspDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"created_at": o.CreatedAt,
		"updated_at": o.UpdatedAt,
		"deleted_at": o.DeletedAt,
		"creator_id": o.CreatorID,
		"creator":    o.Creator,
		"rtsp_url":   o.RtspURL,
		"host_id":    o.HostID,
		"host":       o.Host,
		"ext":        o.Ext,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Rtsp %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// RtspUpdater is an Rtsp updates manager
type RtspUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewRtspUpdater creates new Rtsp updater
// nolint: dupl
func NewRtspUpdater(db *gorm.DB) RtspUpdater {
	return RtspUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Rtsp{}),
	}
}

// ===== END of Rtsp modifiers

// ===== BEGIN of query set TokenQuerySet

// TokenQuerySet is an queryset type for Token
type TokenQuerySet struct {
	db *gorm.DB
}

// NewTokenQuerySet constructs new TokenQuerySet
func NewTokenQuerySet(db *gorm.DB) TokenQuerySet {
	return TokenQuerySet{
		db: db.Model(&Token{}),
	}
}

func (qs TokenQuerySet) w(db *gorm.DB) TokenQuerySet {
	return NewTokenQuerySet(db)
}

// Create is an autogenerated method
// nolint: dupl
func (o *Token) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Token) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) All(ret *[]Token) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) CreatedAtEq(createdAt time.Time) TokenQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) CreatedAtGt(createdAt time.Time) TokenQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) CreatedAtGte(createdAt time.Time) TokenQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) CreatedAtLt(createdAt time.Time) TokenQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) CreatedAtLte(createdAt time.Time) TokenQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) CreatedAtNe(createdAt time.Time) TokenQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// CreatorIDEq is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) CreatorIDEq(creatorID uint64) TokenQuerySet {
	return qs.w(qs.db.Where("creator_id = ?", creatorID))
}

// CreatorIDGt is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) CreatorIDGt(creatorID uint64) TokenQuerySet {
	return qs.w(qs.db.Where("creator_id > ?", creatorID))
}

// CreatorIDGte is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) CreatorIDGte(creatorID uint64) TokenQuerySet {
	return qs.w(qs.db.Where("creator_id >= ?", creatorID))
}

// CreatorIDIn is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) CreatorIDIn(creatorID ...uint64) TokenQuerySet {
	if len(creatorID) == 0 {
		qs.db.AddError(errors.New("must at least pass one creatorID in CreatorIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator_id IN (?)", creatorID))
}

// CreatorIDIsNotNull is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) CreatorIDIsNotNull() TokenQuerySet {
	return qs.w(qs.db.Where("creator_id IS NOT NULL"))
}

// CreatorIDIsNull is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) CreatorIDIsNull() TokenQuerySet {
	return qs.w(qs.db.Where("creator_id IS NULL"))
}

// CreatorIDLt is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) CreatorIDLt(creatorID uint64) TokenQuerySet {
	return qs.w(qs.db.Where("creator_id < ?", creatorID))
}

// CreatorIDLte is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) CreatorIDLte(creatorID uint64) TokenQuerySet {
	return qs.w(qs.db.Where("creator_id <= ?", creatorID))
}

// CreatorIDNe is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) CreatorIDNe(creatorID uint64) TokenQuerySet {
	return qs.w(qs.db.Where("creator_id != ?", creatorID))
}

// CreatorIDNotIn is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) CreatorIDNotIn(creatorID ...uint64) TokenQuerySet {
	if len(creatorID) == 0 {
		qs.db.AddError(errors.New("must at least pass one creatorID in CreatorIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator_id NOT IN (?)", creatorID))
}

// CreatorIsNotNull is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) CreatorIsNotNull() TokenQuerySet {
	return qs.w(qs.db.Where("creator IS NOT NULL"))
}

// CreatorIsNull is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) CreatorIsNull() TokenQuerySet {
	return qs.w(qs.db.Where("creator IS NULL"))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) Delete() error {
	return qs.db.Delete(Token{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Token{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Token{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) DeletedAtEq(deletedAt time.Time) TokenQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) DeletedAtGt(deletedAt time.Time) TokenQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) DeletedAtGte(deletedAt time.Time) TokenQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) DeletedAtIsNotNull() TokenQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) DeletedAtIsNull() TokenQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) DeletedAtLt(deletedAt time.Time) TokenQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) DeletedAtLte(deletedAt time.Time) TokenQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) DeletedAtNe(deletedAt time.Time) TokenQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// DescriptionEq is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) DescriptionEq(description string) TokenQuerySet {
	return qs.w(qs.db.Where("description = ?", description))
}

// DescriptionIn is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) DescriptionIn(description ...string) TokenQuerySet {
	if len(description) == 0 {
		qs.db.AddError(errors.New("must at least pass one description in DescriptionIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("description IN (?)", description))
}

// DescriptionIsNotNull is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) DescriptionIsNotNull() TokenQuerySet {
	return qs.w(qs.db.Where("description IS NOT NULL"))
}

// DescriptionIsNull is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) DescriptionIsNull() TokenQuerySet {
	return qs.w(qs.db.Where("description IS NULL"))
}

// DescriptionLike is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) DescriptionLike(description string) TokenQuerySet {
	return qs.w(qs.db.Where("description LIKE ?", description))
}

// DescriptionNe is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) DescriptionNe(description string) TokenQuerySet {
	return qs.w(qs.db.Where("description != ?", description))
}

// DescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) DescriptionNotIn(description ...string) TokenQuerySet {
	if len(description) == 0 {
		qs.db.AddError(errors.New("must at least pass one description in DescriptionNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("description NOT IN (?)", description))
}

// DescriptionNotlike is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) DescriptionNotlike(description string) TokenQuerySet {
	return qs.w(qs.db.Where("description NOT LIKE ?", description))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) GetUpdater() TokenUpdater {
	return NewTokenUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) IDEq(ID uint64) TokenQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) IDGt(ID uint64) TokenQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) IDGte(ID uint64) TokenQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) IDIn(ID ...uint64) TokenQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) IDLt(ID uint64) TokenQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) IDLte(ID uint64) TokenQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) IDNe(ID uint64) TokenQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) IDNotIn(ID ...uint64) TokenQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) Limit(limit int) TokenQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) NameEq(name string) TokenQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) NameIn(name ...string) TokenQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name IN (?)", name))
}

// NameIsNotNull is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) NameIsNotNull() TokenQuerySet {
	return qs.w(qs.db.Where("name IS NOT NULL"))
}

// NameIsNull is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) NameIsNull() TokenQuerySet {
	return qs.w(qs.db.Where("name IS NULL"))
}

// NameLike is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) NameLike(name string) TokenQuerySet {
	return qs.w(qs.db.Where("name LIKE ?", name))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) NameNe(name string) TokenQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) NameNotIn(name ...string) TokenQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", name))
}

// NameNotlike is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) NameNotlike(name string) TokenQuerySet {
	return qs.w(qs.db.Where("name NOT LIKE ?", name))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) Offset(offset int) TokenQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs TokenQuerySet) One(ret *Token) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) OrderAscByCreatedAt() TokenQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByCreatorID is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) OrderAscByCreatorID() TokenQuerySet {
	return qs.w(qs.db.Order("creator_id ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) OrderAscByDeletedAt() TokenQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) OrderAscByID() TokenQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) OrderAscByUpdatedAt() TokenQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) OrderDescByCreatedAt() TokenQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByCreatorID is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) OrderDescByCreatorID() TokenQuerySet {
	return qs.w(qs.db.Order("creator_id DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) OrderDescByDeletedAt() TokenQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) OrderDescByID() TokenQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) OrderDescByUpdatedAt() TokenQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// PreloadCreator is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) PreloadCreator() TokenQuerySet {
	return qs.w(qs.db.Preload("Creator"))
}

// TokenEq is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) TokenEq(token string) TokenQuerySet {
	return qs.w(qs.db.Where("token = ?", token))
}

// TokenIn is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) TokenIn(token ...string) TokenQuerySet {
	if len(token) == 0 {
		qs.db.AddError(errors.New("must at least pass one token in TokenIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("token IN (?)", token))
}

// TokenIsNotNull is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) TokenIsNotNull() TokenQuerySet {
	return qs.w(qs.db.Where("token IS NOT NULL"))
}

// TokenIsNull is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) TokenIsNull() TokenQuerySet {
	return qs.w(qs.db.Where("token IS NULL"))
}

// TokenLike is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) TokenLike(token string) TokenQuerySet {
	return qs.w(qs.db.Where("token LIKE ?", token))
}

// TokenNe is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) TokenNe(token string) TokenQuerySet {
	return qs.w(qs.db.Where("token != ?", token))
}

// TokenNotIn is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) TokenNotIn(token ...string) TokenQuerySet {
	if len(token) == 0 {
		qs.db.AddError(errors.New("must at least pass one token in TokenNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("token NOT IN (?)", token))
}

// TokenNotlike is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) TokenNotlike(token string) TokenQuerySet {
	return qs.w(qs.db.Where("token NOT LIKE ?", token))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) UpdatedAtEq(updatedAt time.Time) TokenQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) UpdatedAtGt(updatedAt time.Time) TokenQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) UpdatedAtGte(updatedAt time.Time) TokenQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) UpdatedAtLt(updatedAt time.Time) TokenQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) UpdatedAtLte(updatedAt time.Time) TokenQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs TokenQuerySet) UpdatedAtNe(updatedAt time.Time) TokenQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u TokenUpdater) SetCreatedAt(createdAt time.Time) TokenUpdater {
	u.fields[string(TokenDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCreatorID is an autogenerated method
// nolint: dupl
func (u TokenUpdater) SetCreatorID(creatorID *uint64) TokenUpdater {
	u.fields[string(TokenDBSchema.CreatorID)] = creatorID
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u TokenUpdater) SetDeletedAt(deletedAt *time.Time) TokenUpdater {
	u.fields[string(TokenDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetDescription is an autogenerated method
// nolint: dupl
func (u TokenUpdater) SetDescription(description *string) TokenUpdater {
	u.fields[string(TokenDBSchema.Description)] = description
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u TokenUpdater) SetID(ID uint64) TokenUpdater {
	u.fields[string(TokenDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u TokenUpdater) SetName(name *string) TokenUpdater {
	u.fields[string(TokenDBSchema.Name)] = name
	return u
}

// SetToken is an autogenerated method
// nolint: dupl
func (u TokenUpdater) SetToken(token *string) TokenUpdater {
	u.fields[string(TokenDBSchema.Token)] = token
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u TokenUpdater) SetUpdatedAt(updatedAt time.Time) TokenUpdater {
	u.fields[string(TokenDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u TokenUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u TokenUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set TokenQuerySet

// ===== BEGIN of Token modifiers

// TokenDBSchemaField describes database schema field. It requires for method 'Update'
type TokenDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f TokenDBSchemaField) String() string {
	return string(f)
}

// TokenDBSchema stores db field names of Token
var TokenDBSchema = struct {
	ID          TokenDBSchemaField
	CreatedAt   TokenDBSchemaField
	UpdatedAt   TokenDBSchemaField
	DeletedAt   TokenDBSchemaField
	Token       TokenDBSchemaField
	CreatorID   TokenDBSchemaField
	Creator     TokenDBSchemaField
	Name        TokenDBSchemaField
	Description TokenDBSchemaField
}{

	ID:          TokenDBSchemaField("id"),
	CreatedAt:   TokenDBSchemaField("created_at"),
	UpdatedAt:   TokenDBSchemaField("updated_at"),
	DeletedAt:   TokenDBSchemaField("deleted_at"),
	Token:       TokenDBSchemaField("token"),
	CreatorID:   TokenDBSchemaField("creator_id"),
	Creator:     TokenDBSchemaField("creator"),
	Name:        TokenDBSchemaField("name"),
	Description: TokenDBSchemaField("description"),
}

// Update updates Token fields by primary key
// nolint: dupl
func (o *Token) Update(db *gorm.DB, fields ...TokenDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":          o.ID,
		"created_at":  o.CreatedAt,
		"updated_at":  o.UpdatedAt,
		"deleted_at":  o.DeletedAt,
		"token":       o.Token,
		"creator_id":  o.CreatorID,
		"creator":     o.Creator,
		"name":        o.Name,
		"description": o.Description,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Token %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// TokenUpdater is an Token updates manager
type TokenUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewTokenUpdater creates new Token updater
// nolint: dupl
func NewTokenUpdater(db *gorm.DB) TokenUpdater {
	return TokenUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Token{}),
	}
}

// ===== END of Token modifiers

// ===== END of all query sets
